#!/usr/bin/env node

require('./autoload')
const cluster = require('cluster')
let app = require('../app')
let http = require('http')

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || config.default.port)
app.set('port', port)

/**
 * Create HTTP server.
 */

if (cluster.isMaster) {
  console.log(`Master ${process.pid} is running for HTTP server`)
  // for (let i = 0; i < numCPUs; i++) {
  var server = http.createServer(app)

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port)
  server.on('error', onError)
  server.on('listening', onListening)
  if (config.default.workers.active && config.default.workers.workerNum > 0) {
    for (let i = 0; i < config.workers.workerNum; i++)
      cluster.fork()
  }
} else if (cluster.isWorker) {
  let addressWorker = '../jobs/job_' + cluster.worker.id
  require(addressWorker).JobRunning()
  console.log(`Worker ${process.pid} for schedule system `)
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  let port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  let addr = server.address()
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  console.log('Listening on ' + bind)
}
